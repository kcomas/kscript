
use std::num::ParseIntError;
use std::num::ParseFloatError;
use std::io::Error as IoError;

#[derive(Debug)]
pub enum Error {
    NYI,
    ImpossibleState,
    CheckMismatch(char, usize, usize),
    InvalidVariableChar(char, usize, usize),
    InvalidConstantChar(char, usize, usize),
    IntegerParseFail(ParseIntError),
    FloatParseFail(ParseFloatError),
    FileLoadFail(IoError),
    InvalidArrayOp(char, usize, usize),
    InvaliDictOp(char, usize, usize),
    InvalidConditional(char, usize, usize),
    InvalidIfBlock(char, usize, usize),
    InvalidLoop(char, usize, usize),
    InvalidFunctionArguments(char, usize, usize),
    InvalidRef(char, usize, usize),
    InvalidFunctionBody(char, usize, usize),
    InvalidSystemCommand(char, usize, usize),
    InvalidPass(char, usize, usize),
    InvalidFunctionCall(char, usize, usize),
    InvalidObjectAccess(char, usize, usize),
    InvalidCast(char, usize, usize),
    InvalidTokenAccess,
    TokenMismatch,
    InvalidRightRegisterAccess,
    InvalidLeftRegisterAccess,
    UnableToBuildDataType,
    InvalidDictionaryKey,
    InvalidConditonalToken,
    InvalidReference,
    InvalidFunctionArg,
    InvalidFunctionCallArgs,
    InvalidFunctionTarget,
    InvalidNumberOfArguments,
    InvalidFunctionArgPass,
    InvalidScopeRegisterSet,
    InvalidScopeRegisterGet,
    InvalidScopeSink,
    InvalidScopeAssignment,
    InvalidMathType,
    InvalidIoSource,
    InvalidIoSink,
    CannotDeepCopyType,
    InvalidMathAccess,
    VarNotDeclared,
    ConstNotDeclard,
    CanOnlyCompareScalars,
    InvalidCondititonalHolder,
    InvalidObjectAccessTarget,
    InvalidObjectAccessAccessor,
    InvalidArrayIndex,
    InvalidHashKey,
    InvalidReferenceSet,
    InvalidReferenceGet,
    InvalidDereference,
    UnableToWriteTo,
    UnableToAppendTo,
    UnableToAppendToWrongType,
    CastFail,
}
